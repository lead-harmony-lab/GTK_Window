 /*-------------\
|   main.cpp     | Demo Challenge OpenGL Framework
 \*-------------/ ------------------------------------------------------------------------------------------*\
  Version 2.0 - 10/31/2010

  Author: Godvalve
  Email: godvalve@hotmail.com

  Participate in the Demo Challenge. Visit: http://demochronicles.mccolm.org/compete.php

  Description: A simple OpenGL framework derived from the default project produced by the Code::Blocks project wizard.
  Read a thorough description of how this file works at http://demochronicles.mccolm.org/build.php?mode=nextPage&article=10
\*----------------------------------------------------------------------------------------------------------*/

#include <windows.h>
#include <fstream>
#include <iostream>
#include <stdio.h>
#include <vector>
#include <string>
#include <gl/gl.h>
#include <gl/glu.h>
#include "wglext.h"
#include "glext.h"
#include "targa.h"
#include "resource.h"

using std::string;
using std::ifstream;
using std::vector;

struct hShader
{
    unsigned int id;
    string filename;
    string source;
};

//--------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------
float fTime=0.f, fDeltaTime=0.f;
char szAppName[] = "-= Demo Challenge Framework =-";
static BOOL fullscreen;
int iScreenWidth;
int iScreenHeight;
int iBitsPerPel;
float fAspectRatio;
float fFieldOfView;

LARGE_INTEGER TimerFreq;	// Timer Frequency.
LARGE_INTEGER TimeStart;	// Time of start.
LARGE_INTEGER TimeCur;		// Current time.

hShader hVertexShader;
hShader hFragmentShader;
unsigned int hShaderProgram;
GLuint vertexBuffer;
GLuint colourBuffer;
GLuint indexBuffer;
GLuint hTexture0;
GLuint textureCoordinateBuffer;

TargaImage crateTexture;

//--------------------------------------------------------------------------------------
// Forward declarations
//--------------------------------------------------------------------------------------
LRESULT CALLBACK WindowProc(HWND, UINT, WPARAM, LPARAM);
BOOL CALLBACK DlgProc(HWND, UINT, WPARAM, LPARAM);
void EnableOpenGL(HWND hWnd, HDC*, HGLRC*);
void DisableOpenGL(HWND, HDC, HGLRC);
void echoShaderLog(unsigned int shaderID);
bool compileShader(const hShader& shader);
string readFile(const string& filename);
void ConfigureViewport(GLsizei, GLsizei);
void ResizeViewport(GLsizei, GLsizei);
void InitializeDemo();
void RenderNextDemoFrame();
void ChangeDisplayMode();
void RestoreDisplayMode();


PFNWGLCREATECONTEXTATTRIBSARBPROC               wglCreateContextAttribsARB = NULL;
PFNGLGENBUFFERSARBPROC                          glGenBuffers = NULL;
PFNGLDELETEBUFFERSARBPROC                       glDeleteBuffers = NULL;
PFNGLBINDBUFFERPROC                             glBindBuffer = NULL;
PFNGLBUFFERDATAPROC                             glBufferData = NULL;
PFNGLGETUNIFORMLOCATIONPROC						glGetUniformLocation = NULL;
PFNGLUNIFORMMATRIX4FVPROC						glUniformMatrix4fv = NULL;
PFNGLVERTEXATTRIBPOINTERPROC					glVertexAttribPointer = NULL;
PFNGLENABLEVERTEXATTRIBARRAYPROC				glEnableVertexAttribArray = NULL;
PFNGLDISABLEVERTEXATTRIBARRAYPROC				glDisableVertexAttribArray = NULL;
PFNGLCREATEPROGRAMPROC							glCreateProgram = NULL;
PFNGLCREATESHADERPROC							glCreateShader = NULL;
PFNGLSHADERSOURCEPROC							glShaderSource = NULL;
PFNGLCOMPILESHADERPROC							glCompileShader = NULL;
PFNGLATTACHSHADERPROC							glAttachShader = NULL;
PFNGLLINKPROGRAMPROC							glLinkProgram = NULL;
PFNGLBINDATTRIBLOCATIONPROC						glBindAttribLocation = NULL;
PFNGLUSEPROGRAMPROC								glUseProgram = NULL;
PFNGLDELETESHADERPROC							glDeleteShader = NULL;
PFNGLDETACHSHADERPROC							glDetachShader = NULL;
PFNGLGETSHADERIVPROC							glGetShaderiv = NULL;
PFNGLGETSHADERINFOLOGPROC						glGetShaderInfoLog = NULL;
PFNGLUNIFORM1FPROC								glUniform1f = NULL;
PFNGLUNIFORM1IPROC								glUniform1i = NULL;
PFNGLACTIVETEXTUREPROC							glActiveTexture = NULL;


#define BUFFER_OFFSET(i) ((char*)NULL + (i))

//--------------------------------------------------------------------------------------
// Entry point to the program. Initializes everything and goes into a message processing
// loop. Idle time is used to render the scene.
//--------------------------------------------------------------------------------------
int WINAPI WinMain(HINSTANCE hInstance,
                   HINSTANCE hPrevInstance,
                   LPSTR lpCmdLine,
                   int nCmdShow)
{
    WNDCLASSEX wcex;
    HWND hWnd;
    HDC hDC;
    HGLRC hRC;
    MSG msg;

    BOOL bQuit = FALSE;
    fullscreen = TRUE;

    hVertexShader.filename = "basic-fixed.vert";
    hFragmentShader.filename = "basic-fixed.frag";

    // Only shows on the console window if in debug build. Use release mode or change build options to remove console window.
    std::cout << "OpenGL Demo Framework version 2.0 (October 31, 2010)\n";

    /* Display the Demo Challenge Launcher to get user's preferences for fullscreen and resolution */
    if(DialogBoxParam(hInstance, MAKEINTRESOURCE(IDD_DemoLauncher), HWND_DESKTOP, DlgProc, 0) == FALSE)
    {
        return 0;
    }

    /* Register window class */
    wcex.cbSize = sizeof(WNDCLASSEX);
    wcex.style = CS_OWNDC;
    wcex.lpfnWndProc = WindowProc;
    wcex.cbClsExtra = 0;
    wcex.cbWndExtra = 0;
    wcex.hInstance = hInstance;
    wcex.hIcon = LoadIcon(hInstance, (LPCTSTR)IDI_SMICON);
    wcex.hCursor = LoadCursor(NULL, IDC_ARROW);
    wcex.hbrBackground = (HBRUSH)GetStockObject(BLACK_BRUSH);
    wcex.lpszMenuName = NULL;
    wcex.lpszClassName = szAppName;
    wcex.hIconSm = LoadIcon(hInstance, (LPCTSTR)IDI_SMICON);

    if (!RegisterClassEx(&wcex))
        return 0;

    /* Create main window */
    if(fullscreen == FALSE)
    {
        hWnd = CreateWindowEx(0,
                          szAppName,
                          szAppName,
                          WS_OVERLAPPEDWINDOW,
                          CW_USEDEFAULT,
                          CW_USEDEFAULT,
                          iScreenWidth + GetSystemMetrics(SM_CXSIZEFRAME) * 2,
                          iScreenHeight + GetSystemMetrics(SM_CYCAPTION) + GetSystemMetrics(SM_CYSIZEFRAME) * 2,
                          NULL,
                          NULL,
                          hInstance,
                          NULL);
    }
    else
	{
	    /* Bring up the application in fullscreen mode */
		hWnd = CreateWindow(
				szAppName,
				szAppName,
				WS_POPUP,
				0, 0,
				iScreenWidth, iScreenHeight,
				NULL, NULL,
				hInstance,
				0 );
	}

    /* Reset the timer variables */
	QueryPerformanceFrequency(&TimerFreq);
	QueryPerformanceCounter(&TimeStart);

    if(fullscreen)
    {
      ShowCursor(FALSE);
      ChangeDisplayMode();
    }

    /* Enable OpenGL for the window */
    EnableOpenGL(hWnd, &hDC, &hRC);

    ShowWindow(hWnd, nCmdShow);

    InitializeDemo();                                           // new

    /* Program main loop */
    while (!bQuit)
    {
        /* Check for messages */
        if (PeekMessage(&msg, NULL, 0, 0, PM_REMOVE))
        {
            /* Handle or dispatch messages */
            if (msg.message == WM_QUIT)
            {
                bQuit = TRUE;
            }
            else
            {
                TranslateMessage(&msg);
                DispatchMessage(&msg);
            }
        }
        else
        {
			/* Get the current time, and update the time controller. */
			QueryPerformanceCounter(&TimeCur);
			float fOldTime = fTime;
			fTime = (float)((double)(TimeCur.QuadPart-TimeStart.QuadPart)/(double)TimerFreq.QuadPart);
			fDeltaTime = fTime - fOldTime;

            /* Render the next frame in our demo */
			RenderNextDemoFrame();                              // new

            /* Change logical order of back and front buffer */
            SwapBuffers(hDC);
        }
    }
    /* Shutdown OpenGL */
    DisableOpenGL(hWnd, hDC, hRC);

    /* Destroy the window explicitly */
    DestroyWindow(hWnd);

    return msg.wParam;
}

//--------------------------------------------------------------------------------------
// Set the rendering area to accomodate the selected aspect ratio
//--------------------------------------------------------------------------------------
void ConfigureViewport(GLsizei width, GLsizei height)
{
    /* Prevent a divide by Zero */
	if( height == 0 )
		height = 1;

    GLfloat fActualAspectRatio = ((GLfloat)width/(GLfloat)height);
    GLsizei x_offset = 0;
    GLsizei y_offset = 0;
    GLsizei viewPortWidth = width;
    GLsizei viewPortHeight = height;

    if(fAspectRatio < fActualAspectRatio)
    {
        GLfloat visibleWidth = (GLfloat)height * fAspectRatio;
        x_offset = (GLsizei)((width-(int)visibleWidth)/2.0f);
        viewPortWidth = (int)visibleWidth;
    }
    else if(fAspectRatio > fActualAspectRatio)
    {
        GLfloat visibleHeight = (GLfloat)width/fAspectRatio;
        y_offset =(GLsizei)((height-(int)visibleHeight)/2.0f);
        viewPortHeight = (int)visibleHeight;
    }

	/* Set viewport to our new dimensions. */
	glViewport( x_offset, y_offset, viewPortWidth, viewPortHeight);
}

//--------------------------------------------------------------------------------------
// Resize the window and reset the projection matrix
//--------------------------------------------------------------------------------------
void ResizeViewport(GLsizei width, GLsizei height)
{
    /* Set the viewport to conform to selected aspect ratio */
    ConfigureViewport(width, height);

	/* Target the projection matrix stack and reset the top matrix to the identity matrix. */
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();

	gluPerspective(fFieldOfView, fAspectRatio, 1.0F, 1024.0F);		// Creates a matrix that is multiplied against the current projection matrix

	/* Retarget the ModelView matrix stack (assumes that window is resized in the middle of a drawing routine) */
	glMatrixMode( GL_MODELVIEW );
}

//--------------------------------------------------------------------------------------
// Set screen to fullscreen mode
//--------------------------------------------------------------------------------------
void ChangeDisplayMode()
{
  DEVMODE device_mode;

  memset(&device_mode, 0, sizeof(DEVMODE));
  device_mode.dmSize = sizeof(DEVMODE);
  device_mode.dmPelsWidth  = iScreenWidth;
  device_mode.dmPelsHeight = iScreenHeight;
  device_mode.dmBitsPerPel = iBitsPerPel;
  device_mode.dmFields     = DM_PELSWIDTH | DM_PELSHEIGHT | DM_BITSPERPEL;

  ChangeDisplaySettings(&device_mode, CDS_FULLSCREEN);
}

//--------------------------------------------------------------------------------------
// Set screen to windowed mode using values in registry
//--------------------------------------------------------------------------------------
void RestoreDisplayMode()
{
    ChangeDisplaySettings(NULL, 0);
}

//--------------------------------------------------------------------------------------
// Called every time the application receives a message
//--------------------------------------------------------------------------------------
LRESULT CALLBACK WindowProc(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam)
{
    switch (uMsg)
    {
        case WM_CLOSE:
            PostQuitMessage(0);
        break;

        case WM_DESTROY:
            return 0;

        case WM_KEYDOWN:
        {
            switch (wParam)
            {
                case VK_ESCAPE:
                    PostQuitMessage(0);
                break;
            }
        }
        break;

        /* Catch and handle window resize event */
		case WM_SIZE:
			ResizeViewport(LOWORD(lParam),HIWORD(lParam));		// LoWord= width, HiWord= height
		break;

        default:
            return DefWindowProc(hWnd, uMsg, wParam, lParam);
    }

    return 0;
}

//--------------------------------------------------------------------------------------
// Called every time the Demo Challenge Launcher receives a message
//--------------------------------------------------------------------------------------
BOOL CALLBACK DlgProc (HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam)
{
    switch (message)
    {
        case WM_INITDIALOG:
        {
            /* Select fullscreen option by default */
            HWND hCkBxFullscreen = GetDlgItem(hDlg, IDC_FULLSCREEN);
            PostMessage(hCkBxFullscreen, BM_SETCHECK,BST_CHECKED,0);

            HWND hResolutionList = GetDlgItem(hDlg, IDC_RESOLUTION);
            DWORD iDevNum	= 0;
            DWORD iModeNum = 0;
            DISPLAY_DEVICE ddi;
            DEVMODE dmi;
            TCHAR szBuffer [100];

            ZeroMemory(&ddi, sizeof(ddi));
            ddi.cb = sizeof(ddi);
            ZeroMemory(&dmi, sizeof(dmi));
            dmi.dmSize = sizeof(dmi);

            while(EnumDisplayDevices (NULL, iDevNum++, &ddi, 0))
            {
                while(EnumDisplaySettings (ddi.DeviceName, iModeNum++, &dmi))
                {
                    if(((ddi.StateFlags & DISPLAY_DEVICE_PRIMARY_DEVICE) > 0) && (dmi.dmBitsPerPel >= 32))
                    {
                        wsprintf(szBuffer, "%ix%i, %i bpp @ %iHz", dmi.dmPelsWidth,
                                  dmi.dmPelsHeight, dmi.dmBitsPerPel, dmi.dmDisplayFrequency);
                        SendMessage(hResolutionList, LB_INSERTSTRING,0,(LPARAM)szBuffer);       // p. 403 Petzold
                        ZeroMemory(&dmi, sizeof(dmi));
                        dmi.dmSize = sizeof(dmi);
                    }
                }
                ZeroMemory(&ddi, sizeof(ddi));
                ddi.cb = sizeof(ddi);
                iModeNum = 0;
            }

            SendMessage(hResolutionList, LB_SETCURSEL, 0, 0);   // p. 403 Petzold

            HWND hAspectRatioList = GetDlgItem(hDlg, IDC_ASPECT);
            SendMessage(hAspectRatioList, LB_INSERTSTRING,(WPARAM)-1,(LPARAM)"Auto");
            SendMessage(hAspectRatioList, LB_INSERTSTRING,(WPARAM)-1,(LPARAM)"4:3");
            SendMessage(hAspectRatioList, LB_INSERTSTRING,(WPARAM)-1,(LPARAM)"16:9");
            SendMessage(hAspectRatioList, LB_INSERTSTRING,(WPARAM)-1,(LPARAM)"16:10");
            SendMessage(hAspectRatioList, LB_SETCURSEL, 0, 0);

            return TRUE;
        }
        break;

        case WM_COMMAND:
        {
            switch(LOWORD (wParam))
            {
                /* User pressed the 'Launch!' button */
                case IDLAUNCH:
                {
                    /* Check to see if fullscreen is selected and set our global fullscreen variable */
                    fullscreen = (IsDlgButtonChecked(hDlg, IDC_FULLSCREEN) == BST_CHECKED);

                    /* Grab the selected resolution */
                    HWND hResolutionList = GetDlgItem(hDlg, IDC_RESOLUTION);                // p. 404 Petzold
                    int iIndex = SendMessage(hResolutionList, LB_GETCURSEL, 0, 0);
                    int iLength = SendMessage(hResolutionList, LB_GETTEXTLEN, iIndex, 0);
                    char* szResolutionBuffer = new char[iLength+1];;
                    SendMessage(hResolutionList, LB_GETTEXT, iIndex, (LPARAM)szResolutionBuffer);

                    int iCount = 1;
                    char * pch;
                    pch = strtok(szResolutionBuffer,"x");
                    while(pch != NULL)
                    {
                        switch(iCount)
                        {
                            case 1:
                                iScreenWidth = (int)atof(pch);
                                break;
                            case 2:
                                iScreenHeight = (int)atof(pch);
                                break;
                            case 3:
                                iBitsPerPel = (int)atof(pch);
                                break;
                        }

                        pch = strtok (NULL, " ,H");
                        iCount++;
                    }

                    /* Get the selected aspect ratio */
			        HWND hAspectRatioList = GetDlgItem(hDlg, IDC_ASPECT);
                    iIndex = SendMessage(hAspectRatioList, LB_GETCURSEL, 0, 0);

                    GLfloat iWidthRatio;
                    GLfloat iHeightRatio;

                    if(iIndex == 0)
                    {
                        /* Use the native aspect ratio */
                        fAspectRatio = (GLfloat)iScreenWidth / (GLfloat)iScreenHeight;
                    }
                    else
                    {
                        /* Use the selected aspect ratio */
                        iLength = SendMessage(hAspectRatioList, LB_GETTEXTLEN, iIndex, 0);
                        char* szAspectBuffer = new char[iLength+1];
                        SendMessage(hAspectRatioList, LB_GETTEXT, iIndex, (LPARAM)szAspectBuffer);

                        iCount = 1;
                        pch = strtok(szAspectBuffer,":");

                        while(pch != NULL)
                        {
                            switch(iCount)
                            {
                                case 1:
                                    iWidthRatio = (GLfloat)atof(pch);
                                    break;
                                case 2:
                                    iHeightRatio = (GLfloat)atof(pch);
                                    break;
                            }

                            pch = strtok (NULL, ":");
                            iCount++;
                        }
                        /* Use selected aspect ratio */
                        fAspectRatio = iWidthRatio / iHeightRatio;
                    }

                    EndDialog (hDlg, 1);    // User is ready to launch the demo
                    return TRUE;
                }

                /* Handle default Win32 keyboard logic for dialog windows (ESC key pressed) */
                case IDCANCEL:
                /* User pressed the 'Exit' button */
                case IDEXIT:
                    EndDialog (hDlg, 0);    // User cancelled the dialog window
                    return TRUE;
            }
        }
        break;

        /* Moves the window when the user clicks anywhere not covered by a control. HTCAPTION specifies */
        /* that all button clicks originate in the title bar area - even when the window has no title bar. */
        case WM_LBUTTONDOWN:
        {
            PostMessage(hDlg, WM_NCLBUTTONDOWN, HTCAPTION,0);
            break;
        }
    }
    return FALSE;
}


//--------------------------------------------------------------------------------------
// Set the application's pixel format and create a rendering context
//--------------------------------------------------------------------------------------
void EnableOpenGL(HWND hWnd, HDC* hDC, HGLRC* hRC)
{
    PIXELFORMATDESCRIPTOR pfd;
    int iFormat;

    /* get the device context (DC) */
    *hDC = GetDC(hWnd);

    /* set the pixel format for the DC */
    ZeroMemory(&pfd, sizeof(pfd));

    pfd.nSize = sizeof(pfd);
    pfd.nVersion = 1;
    pfd.dwFlags = PFD_DRAW_TO_WINDOW |
                  PFD_SUPPORT_OPENGL | PFD_DOUBLEBUFFER;
    pfd.iPixelType = PFD_TYPE_RGBA;
    pfd.cColorBits = 24;
    pfd.cDepthBits = 16;
    pfd.iLayerType = PFD_MAIN_PLANE;

    iFormat = ChoosePixelFormat(*hDC, &pfd);

    SetPixelFormat(*hDC, iFormat, &pfd);

    HGLRC tempContext;

    /* create and enable a temporary rendering context (RC) */
    tempContext = wglCreateContext(*hDC);

    /*WGL functions are extensions to Win32 specifically for OpenGL (used for remembering OGL settings and commands)*/
    wglMakeCurrent(*hDC, tempContext);

    /* get the function pointers*/
    wglCreateContextAttribsARB  = (PFNWGLCREATECONTEXTATTRIBSARBPROC) wglGetProcAddress("wglCreateContextAttribsARB");
    glGenBuffers                = (PFNGLGENBUFFERSARBPROC)wglGetProcAddress("glGenBuffers");
    glDeleteBuffers             = (PFNGLDELETEBUFFERSARBPROC)wglGetProcAddress("glDeleteBuffers");
    glBindBuffer                = (PFNGLBINDBUFFERPROC)wglGetProcAddress("glBindBuffer");
    glBufferData                = (PFNGLBUFFERDATAPROC)wglGetProcAddress("glBufferData");
    glGetUniformLocation		= (PFNGLGETUNIFORMLOCATIONPROC)wglGetProcAddress("glGetUniformLocation");
    glUniformMatrix4fv			= (PFNGLUNIFORMMATRIX4FVPROC)wglGetProcAddress("glUniformMatrix4fv");
    glVertexAttribPointer		= (PFNGLVERTEXATTRIBPOINTERPROC)wglGetProcAddress("glVertexAttribPointer");
    glEnableVertexAttribArray	= (PFNGLENABLEVERTEXATTRIBARRAYPROC)wglGetProcAddress("glEnableVertexAttribArray");
    glDisableVertexAttribArray	= (PFNGLDISABLEVERTEXATTRIBARRAYPROC)wglGetProcAddress("glDisableVertexAttribArray");
    glCreateProgram				= (PFNGLCREATEPROGRAMPROC)wglGetProcAddress("glCreateProgram");
    glCreateShader				= (PFNGLCREATESHADERPROC)wglGetProcAddress("glCreateShader");
    glShaderSource				= (PFNGLSHADERSOURCEPROC)wglGetProcAddress("glShaderSource");
    glCompileShader				= (PFNGLCOMPILESHADERPROC)wglGetProcAddress("glCompileShader");
    glAttachShader				= (PFNGLATTACHSHADERPROC)wglGetProcAddress("glAttachShader");
    glLinkProgram				= (PFNGLLINKPROGRAMPROC)wglGetProcAddress("glLinkProgram");
    glBindAttribLocation		= (PFNGLBINDATTRIBLOCATIONPROC)wglGetProcAddress("glBindAttribLocation");
    glUseProgram				= (PFNGLUSEPROGRAMPROC)wglGetProcAddress("glUseProgram");
    glDeleteShader				= (PFNGLDELETESHADERPROC)wglGetProcAddress("glDeleteShader");
    glDetachShader				= (PFNGLDETACHSHADERPROC)wglGetProcAddress("glDetachShader");
    glGetShaderiv				= (PFNGLGETSHADERIVPROC)wglGetProcAddress("glGetShaderiv");
    glGetShaderInfoLog			= (PFNGLGETSHADERINFOLOGPROC)wglGetProcAddress("glGetShaderInfoLog");
    glUniform1f					= (PFNGLUNIFORM1FPROC)wglGetProcAddress("glUniform1f");
    glUniform1i					= (PFNGLUNIFORM1IPROC)wglGetProcAddress("glUniform1i");
    glActiveTexture				= (PFNGLACTIVETEXTUREPROC)wglGetProcAddress("glActiveTexture");

    if(!wglCreateContextAttribsARB)
    {
        MessageBox(NULL, "OGL 3.0 not supported", "Error", MB_ICONERROR | MB_OK);
    }

    int attribs[] = {WGL_CONTEXT_MAJOR_VERSION_ARB, 3,
                     WGL_CONTEXT_MINOR_VERSION_ARB, 1,
                     0};  // Zero indicates the end of the array.

    *hRC = wglCreateContextAttribsARB(*hDC, 0, attribs);
    wglDeleteContext(tempContext);

    wglMakeCurrent(*hDC, *hRC);
}

//--------------------------------------------------------------------------------------
// Release rendering context, reset display mode, and release the device context
//--------------------------------------------------------------------------------------
void DisableOpenGL (HWND hWnd, HDC hDC, HGLRC hRC)
{
    wglMakeCurrent(NULL, NULL);
    wglDeleteContext(hRC);

    /* Restore graphics mode to values stored in registry */
    if(fullscreen)
    {
      RestoreDisplayMode();
      ShowCursor(TRUE);
    }

    ReleaseDC(hWnd, hDC);
}

//--------------------------------------------------------------------------------------
// Initialize the OpenGL state machine. Set up projection matrix and other initial states
//--------------------------------------------------------------------------------------
void InitializeDemo()
{
    hShaderProgram = glCreateProgram();
    hVertexShader.id = glCreateShader(GL_VERTEX_SHADER);
    hFragmentShader.id = glCreateShader(GL_FRAGMENT_SHADER);

    hVertexShader.source = readFile(hVertexShader.filename);
    hFragmentShader.source = readFile(hFragmentShader.filename);

    if (hVertexShader.source.empty() || hFragmentShader.source.empty())
    {
        std::cerr << "Could not initialize the shaders." << std::endl;

        MessageBox(NULL, "Could not initialize application.", "ERROR!", MB_ICONERROR | MB_OK);
    }

    const GLchar* tmp = static_cast<const GLchar*>(hVertexShader.source.c_str());
    glShaderSource(hVertexShader.id, 1, (const GLchar**)&tmp, NULL);

    tmp = static_cast<const GLchar*>(hFragmentShader.source.c_str());
    glShaderSource(hFragmentShader.id, 1, (const GLchar**)&tmp, NULL);

    if (!compileShader(hVertexShader) || !compileShader(hFragmentShader))
    {
        std::cerr << "Shaders are invalid! Could not compile shaders." << std::endl;
        std::cerr << "Could not initialize shaders." << std::endl;

        MessageBox(NULL, "Could not initialize the application.", "ERROR!", MB_ICONERROR | MB_OK);
    }

    glAttachShader(hShaderProgram, hVertexShader.id);
    glAttachShader(hShaderProgram, hFragmentShader.id);

    glLinkProgram(hShaderProgram);

    //Bind the attribute locations
    glBindAttribLocation(hShaderProgram, 0, "attribVertex");
    glBindAttribLocation(hShaderProgram, 1, "attribColor");
    glBindAttribLocation(hShaderProgram, 2, "a_TexCoord");

    glLinkProgram(hShaderProgram);  //Re-link the program
    glUseProgram(hShaderProgram);   //Enable our shader


    /* Set the viewport to the selected aspect ratio */
    ConfigureViewport(iScreenWidth, iScreenHeight);

	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();

    fFieldOfView = 45.0F;

	gluPerspective(fFieldOfView, fAspectRatio, 1.0F, 1024.0F);		// Creates a matrix that is multiplied against the current projection matrix

	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();

	/* Enable depth buffering */
    glEnable(GL_DEPTH_TEST);
}

//--------------------------------------------------------------------------------------
// The location of your OpenGL code
//--------------------------------------------------------------------------------------
void RenderNextDemoFrame()
{

    See: https://github.com/cprogrammer1994/Headless-rendering-with-python/blob/master/main.py for additional information

    float modelviewMatrix[16];
    float projectionMatrix[16];

	/* OpenGL animation code goes here */
	glClearColor(0.0f, 0.0f, 0.0f, 0.0f);
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

	glPushMatrix();

	glTranslatef(0.0f, 0.0f, -2.125f);
	glRotatef(fTime*120, 0.2f, 1.0f, 0.2f);

    //Get the current matrices from OpenGL
    glGetFloatv(GL_MODELVIEW_MATRIX, modelviewMatrix);
    glGetFloatv(GL_PROJECTION_MATRIX, projectionMatrix);

    //Send the modelview, projection, and texture data to the shaders
    GLuint location = glGetUniformLocation(hShaderProgram, "modelview_matrix");
    glUniformMatrix4fv(location, 1, false, modelviewMatrix);
    location = glGetUniformLocation(hShaderProgram, "projection_matrix");
    glUniformMatrix4fv(location, 1, false, projectionMatrix);

    location = glGetUniformLocation(hShaderProgram, "texture0");
    glUniform1i(location, 0);

    GLfloat color[]  = {1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.5f, 0.5f, 0.5f,1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.5f, 0.5f, 0.5f};
    glGenBuffers(1, &colourBuffer); //Generate a buffer for the colors
    glBindBuffer(GL_ARRAY_BUFFER, colourBuffer); //Bind the color buffer
    glBufferData(GL_ARRAY_BUFFER, sizeof(GLfloat)*24, &color[0], GL_STATIC_DRAW);

    GLfloat vertex[] = {-0.5f, -0.5f, 0.5f, 0.5f, -0.5f, 0.5f, 0.5f, 0.5f, 0.5f, -0.5f, 0.5f, 0.5f, 0.5f, -0.5f, -0.5f, -0.5f, -0.5f, -0.5f, -0.5f, 0.5f, -0.5f, 0.5f, 0.5f, -0.5f};
    glGenBuffers(1, &vertexBuffer); //Generate a buffer for the vertices
    glBindBuffer(GL_ARRAY_BUFFER, vertexBuffer); //Bind the vertex buffer
    glBufferData(GL_ARRAY_BUFFER, sizeof(GLfloat)*24, &vertex[0], GL_STATIC_DRAW);

    GLuint indices[] = {0,1,2,0,2,3,1,4,7,1,7,2,4,5,6,4,6,7,5,0,3,5,3,6,3,2,7,3,7,6,5,4,1,5,1,0};
    glGenBuffers(1, &indexBuffer); // Generate a buffer for the indices
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, indexBuffer); // Bind the indices buffer
    glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(GLuint)*36, &indices[0], GL_STATIC_DRAW);

    GLfloat m_texCoords[] = {0.0f, 0.0f, 1.0f, 0.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 1.0f, 1.0f, 0.0f, 1.0f};
    glGenBuffers(1, &textureCoordinateBuffer);
    glBindBuffer(GL_ARRAY_BUFFER, textureCoordinateBuffer); //Bind the vertex buffer
    glBufferData(GL_ARRAY_BUFFER, sizeof(GLfloat)*16, &m_texCoords[0], GL_STATIC_DRAW); //Send the data to OpenGL


    if (!crateTexture.load("crate.tga"))
    {
        std::cerr << "Could not load the crate texture" << std::endl;
    }

    glGenTextures(1, &hTexture0);
    glActiveTexture(GL_TEXTURE0);
    glBindTexture(GL_TEXTURE_2D, hTexture0);
    //glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);

    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB8, crateTexture.getWidth(), crateTexture.getHeight(), 0, GL_RGB, GL_UNSIGNED_BYTE, crateTexture.getImageData());

    glEnableVertexAttribArray(0); //Enable the vertex attribute
    glEnableVertexAttribArray(1); //Enable the color attribute
    glEnableVertexAttribArray(2); //Enable the texture coordinate attribute

    //Bind the vertex array and set the vertex pointer to point at it
    glBindBuffer(GL_ARRAY_BUFFER, vertexBuffer);
    glVertexAttribPointer((GLint)0, 3, GL_FLOAT, GL_FALSE, 0, 0);

    //Bind the color array
    glBindBuffer(GL_ARRAY_BUFFER, colourBuffer);
    glVertexAttribPointer((GLint)1, 3, GL_FLOAT, GL_FALSE, 0, 0);

    glBindBuffer(GL_ARRAY_BUFFER, textureCoordinateBuffer);
    glVertexAttribPointer((GLint)2, 2, GL_FLOAT, GL_FALSE, 0, 0);

    //Bind the index array
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, indexBuffer);

    //Draw the triangles
    glDrawElements(GL_TRIANGLES, 36, GL_UNSIGNED_INT, 0);

    glDisableVertexAttribArray(0); //Disable the vertex attribute
    glDisableVertexAttribArray(1); //Disable the color attribute
    glDisableVertexAttribArray(2); //Disable the texture coordinate attribute

    glDeleteTextures(1, &hTexture0);

	glPopMatrix();
}

string readFile(const string& filename)
{
    ifstream fileIn(filename.c_str());

    if (!fileIn.good())
    {
        std::cerr << "Could not load shader: " << filename << std::endl;
        return string();
    }

    string stringBuffer(std::istreambuf_iterator<char>(fileIn), (std::istreambuf_iterator<char>()));
    return stringBuffer;
}

bool compileShader(const hShader& shader)
{
    glCompileShader(shader.id);
    GLint result = GL_FALSE;
    glGetShaderiv(shader.id, GL_COMPILE_STATUS, &result);

    if (!result)
    {
        std::cout << "Could not compile shader: " << shader.id << std::endl;
        echoShaderLog(shader.id);
        return false;
    }

    return true;
}

void echoShaderLog(unsigned int shaderID)
{
    vector<char> infoLog;
    GLint infoLen;
    glGetShaderiv(shaderID, GL_INFO_LOG_LENGTH, &infoLen);
    infoLog.resize(infoLen);

    std::cerr << "Shader contains errors!" << std::endl;
    glGetShaderInfoLog(shaderID, sizeof(infoLog), &infoLen, &infoLog[0]);

    std::cerr << string(infoLog.begin(), infoLog.end()) << std::endl;
}